#pragma once

#include <SDL.h>
#include <boost\assign\list_of.hpp>
#include <boost\bimap.hpp>

/* Maps all keys to sdl keys */
typedef enum
{	
	KEY_UNKNOWN		= SDLK_UNKNOWN,
	KEY_BACKSPACE	= SDLK_BACKSPACE,
	KEY_TAB			= SDLK_TAB,
	KEY_CLEAR		= SDLK_CLEAR,
	KEY_RETURN		= SDLK_RETURN,
	KEY_PAUSE		= SDLK_PAUSE,
	KEY_ESCAPE		= SDLK_ESCAPE,
	KEY_SPACE		= SDLK_SPACE,
	KEY_EXCLAIM		= SDLK_EXCLAIM,
	KEY_QUOTEDBL	= SDLK_QUOTEDBL,
	KEY_HASH		= SDLK_HASH,
	KEY_DOLLAR		= SDLK_DOLLAR,
	KEY_AMPERSAND	= SDLK_AMPERSAND,
	KEY_QUOTE		= SDLK_QUOTE,
	KEY_LEFTPAREN	= SDLK_LEFTPAREN,
	KEY_RIGHTPAREN	= SDLK_RIGHTPAREN,
	KEY_ASTERISK	= SDLK_ASTERISK,
	KEY_PLUS		= SDLK_PLUS,
	KEY_COMMA		= SDLK_COMMA,
	KEY_MINUS		= SDLK_MINUS,
	KEY_PERIOD		= SDLK_PERIOD,
	KEY_SLASH		= SDLK_SLASH,
	KEY_0			= SDLK_0,
	KEY_1			= SDLK_1,
	KEY_2			= SDLK_2,
	KEY_3			= SDLK_3,
	KEY_4			= SDLK_4,
	KEY_5			= SDLK_5,
	KEY_6			= SDLK_6,
	KEY_7			= SDLK_7,
	KEY_8			= SDLK_8,
	KEY_9			= SDLK_9,
	KEY_COLON		= SDLK_COLON,
	KEY_SEMICOLON	= SDLK_SEMICOLON,
	KEY_LESS		= SDLK_LESS,
	KEY_EQUALS		= SDLK_EQUALS,
	KEY_GREATER		= SDLK_GREATER,
	KEY_QUESTION	= SDLK_QUESTION,
	KEY_AT			= SDLK_AT,
	
	/* 
	Skip uppercase letters
	*/
	KEY_LEFTBRACKET		= SDLK_LEFTBRACKET,
	KEY_BACKSLASH		= SDLK_BACKSLASH,
	KEY_RIGHTBRACKET	= SDLK_RIGHTBRACKET,
	KEY_CARET			= SDLK_CARET,
	KEY_UNDERSCORE		= SDLK_UNDERSCORE,
	KEY_BACKQUOTE		= SDLK_BACKQUOTE,
	KEY_a			= SDLK_a,
	KEY_b			= SDLK_b,
	KEY_c			= SDLK_c,
	KEY_d			= SDLK_d,
	KEY_e			= SDLK_e,
	KEY_f			= SDLK_f,
	KEY_g			= SDLK_g,
	KEY_h			= SDLK_h,
	KEY_i			= SDLK_i,
	KEY_j			= SDLK_j,
	KEY_k			= SDLK_k,
	KEY_l			= SDLK_l,
	KEY_m			= SDLK_m,
	KEY_n			= SDLK_n,
	KEY_o			= SDLK_o,
	KEY_p			= SDLK_p,
	KEY_q			= SDLK_q,
	KEY_r			= SDLK_r,
	KEY_s			= SDLK_s,
	KEY_t			= SDLK_t,
	KEY_u			= SDLK_u,
	KEY_v			= SDLK_v,
	KEY_w			= SDLK_w,
	KEY_x			= SDLK_x,
	KEY_y			= SDLK_y,
	KEY_z			= SDLK_z,
	KEY_DELETE		= SDLK_DELETE,
	/* End of ASCII mapped keysyms */
	
	/* Numeric keypad */
	KEY_KP0			= SDLK_KP_0,
	KEY_KP1			= SDLK_KP_1,
	KEY_KP2			= SDLK_KP_2,
	KEY_KP3			= SDLK_KP_3,
	KEY_KP4			= SDLK_KP_4,
	KEY_KP5			= SDLK_KP_5,
	KEY_KP6			= SDLK_KP_6,
	KEY_KP7			= SDLK_KP_7,
	KEY_KP8			= SDLK_KP_8,
	KEY_KP9			= SDLK_KP_9,
	KEY_KP_PEROID	= SDLK_KP_PERIOD,
	KEY_KP_DIVIDE	= SDLK_KP_DIVIDE,
	KEY_KP_MULTIPLY	= SDLK_KP_MULTIPLY,
	KEY_KP_MINUS	= SDLK_KP_MINUS,
	KEY_KP_PLUS		= SDLK_KP_PLUS,
	KEY_KP_ENTER	= SDLK_KP_ENTER,
	KEY_KP_EQUALS	= SDLK_KP_EQUALS,
	
	/* Arrows + Home/End pad */
	KEY_UP			= SDLK_UP,
	KEY_DOWN		= SDLK_DOWN,
	KEY_RIGHT		= SDLK_RIGHT,
	KEY_LEFT		= SDLK_LEFT,
	KEY_INSERT		= SDLK_INSERT,
	KEY_HOME		= SDLK_HOME,
	KEY_END			= SDLK_END,
	KEY_PAGEUP		= SDLK_PAGEUP,
	KEY_PAGEDOWN	= SDLK_PAGEDOWN,
	
	/* Function keys */
	KEY_F1			= SDLK_F1,
	KEY_F2			= SDLK_F2,
	KEY_F3			= SDLK_F3,
	KEY_F4			= SDLK_F4,
	KEY_F5			= SDLK_F5,
	KEY_F6			= SDLK_F6,
	KEY_F7			= SDLK_F7,
	KEY_F8			= SDLK_F8,
	KEY_F9			= SDLK_F9,
	KEY_F10			= SDLK_F10,
	KEY_F11			= SDLK_F11,
	KEY_F12			= SDLK_F12,
	KEY_F13			= SDLK_F13,
	KEY_F14			= SDLK_F14,
	KEY_F15			= SDLK_F15,
	
	/* Key state modifier keys */
	KEY_NUMLOCK		= SDLK_NUMLOCKCLEAR,
	KEY_CAPSLOCK	= SDLK_CAPSLOCK,
	KEY_SCROLLLOCK	= SDLK_SCROLLLOCK,
	KEY_RSHIFT		= SDLK_RSHIFT,
	KEY_LSHFIT		= SDLK_LSHIFT,
	KEY_RCTRL		= SDLK_RCTRL,
	KEY_LCTRL		= SDLK_LCTRL,
	KEY_RALT		= SDLK_RALT,
	KEY_LALT		= SDLK_LALT,
	KEY_LGUI		= SDLK_LGUI,		/* Left "Windows" key */
	KEY_RGUI		= SDLK_RGUI,		/* Right "Windows" key */
	
	/* Miscellaneous function keys */
	KEY_HELP		= SDLK_HELP,
	KEY_PRINT		= SDLK_PRINTSCREEN,
	KEY_SYSREQ		= SDLK_SYSREQ,
	KEY_MENU		= SDLK_MENU,
	
	/* Add any other keys here */
} Key;

// Map the keys to a string to be easily readable from a config file
typedef boost::bimap< Key, std::string > keyBM_type;

const keyBM_type KeyBiMap = 
	boost::assign::list_of< keyBM_type::relation >
	( KEY_UNKNOWN, "KEY_UNKNOWN" )
	( KEY_BACKSPACE, "KEY_BACKSPACE" )
	( KEY_TAB, "KEY_TAB" )
	( KEY_CLEAR, "KEY_CLEAR" )
	( KEY_RETURN, "KEY_RETURN" )
	( KEY_PAUSE, "KEY_PAUSE" )
	( KEY_ESCAPE, "KEY_ESCAPE" )
	( KEY_SPACE, "KEY_SPACE" )
	( KEY_EXCLAIM, "KEY_EXCLAIM" )
	( KEY_QUOTEDBL, "KEY_QUOTEDBL" )
	( KEY_HASH, "KEY_HASH" )
	( KEY_DOLLAR, "KEY_DOLLAR" )
	( KEY_AMPERSAND, "KEY_AMPERSAND" )
	( KEY_QUOTE, "KEY_QUOTE" )
	( KEY_LEFTPAREN, "KEY_LEFTPAREN" )
	( KEY_RIGHTPAREN, "KEY_RIGHTPAREN" )
	( KEY_ASTERISK, "KEY_ASTERISK" )
	( KEY_PLUS, "KEY_PLUS" )
	( KEY_COMMA, "KEY_COMMA" )
	( KEY_MINUS, "KEY_MINUS" )
	( KEY_PERIOD, "KEY_PERIOD" )
	( KEY_SLASH, "KEY_SLASH" )
	( KEY_0, "KEY_0" )
	( KEY_1, "KEY_1" )
	( KEY_2, "KEY_2" )
	( KEY_3, "KEY_3" )
	( KEY_4, "KEY_4" )
	( KEY_5, "KEY_5" )
	( KEY_6, "KEY_6" )
	( KEY_7, "KEY_7" )
	( KEY_8, "KEY_8" )
	( KEY_9, "KEY_9" )
	( KEY_COLON, "KEY_COLON" )
	( KEY_SEMICOLON, "KEY_SEMICOLON" )
	( KEY_LESS, "KEY_LESS" )
	( KEY_EQUALS, "KEY_EQUALS" )
	( KEY_GREATER, "KEY_GREATER" )
	( KEY_QUESTION, "KEY_QUESTION" )
	( KEY_AT, "KEY_AT" )
	( KEY_LEFTBRACKET, "KEY_LEFTBRACKET" )
	( KEY_BACKSLASH, "KEY_BACKSLASH" )
	( KEY_RIGHTBRACKET, "KEY_RIGHTBRACKET" )
	( KEY_CARET, "KEY_CARET" )
	( KEY_UNDERSCORE, "KEY_UNDERSCORE" )
	( KEY_BACKQUOTE, "KEY_BACKQUOTE" )
	( KEY_a, "KEY_a" )
	( KEY_b, "KEY_b" )
	( KEY_c, "KEY_c" )
	( KEY_d, "KEY_d" )
	( KEY_e, "KEY_e" )
	( KEY_f, "KEY_f" )
	( KEY_g, "KEY_g" )
	( KEY_h, "KEY_h" )
	( KEY_i, "KEY_i" )
	( KEY_j, "KEY_j" )
	( KEY_k, "KEY_k" )
	( KEY_l, "KEY_l" )
	( KEY_m, "KEY_m" )
	( KEY_n, "KEY_n" )
	( KEY_o, "KEY_o" )
	( KEY_p, "KEY_p" )
	( KEY_q, "KEY_q" )
	( KEY_r, "KEY_r" )
	( KEY_s, "KEY_s" )
	( KEY_t, "KEY_t" )
	( KEY_u, "KEY_u" )
	( KEY_v, "KEY_v" )
	( KEY_w, "KEY_w" )
	( KEY_x, "KEY_x" )
	( KEY_y, "KEY_y" )
	( KEY_z, "KEY_z" )
	( KEY_DELETE, "KEY_DELETE" )
	( KEY_KP0, "KEY_KP0" )
	( KEY_KP1, "KEY_KP1" )
	( KEY_KP2, "KEY_KP2" )
	( KEY_KP3, "KEY_KP3" )
	( KEY_KP4, "KEY_KP4" )
	( KEY_KP5, "KEY_KP5" )
	( KEY_KP6, "KEY_KP6" )
	( KEY_KP7, "KEY_KP7" )
	( KEY_KP8, "KEY_KP8" )
	( KEY_KP9, "KEY_KP9" )
	( KEY_KP_PEROID, "KEY_KP_PEROID" )
	( KEY_KP_DIVIDE, "KEY_KP_DIVIDE" )
	( KEY_KP_MULTIPLY, "KEY_KP_MULTIPLY" )
	( KEY_KP_MINUS, "KEY_KP_MINUS" )
	( KEY_KP_PLUS, "KEY_KP_PLUS" )
	( KEY_KP_ENTER, "KEY_KP_ENTER" )
	( KEY_KP_EQUALS, "KEY_KP_EQUALS" )
	( KEY_UP, "KEY_UP" )
	( KEY_DOWN, "KEY_DOWN" )
	( KEY_RIGHT, "KEY_RIGHT" )
	( KEY_LEFT, "KEY_LEFT" )
	( KEY_INSERT, "KEY_INSERT" )
	( KEY_HOME, "KEY_HOME" )
	( KEY_END, "KEY_END" )
	( KEY_PAGEUP, "KEY_PAGEUP" )
	( KEY_PAGEDOWN, "KEY_PAGEDOWN" )
	( KEY_F1, "KEY_F1" )
	( KEY_F2, "KEY_F2" )
	( KEY_F3, "KEY_F3" )
	( KEY_F4, "KEY_F4" )
	( KEY_F5, "KEY_F5" )
	( KEY_F6, "KEY_F6" )
	( KEY_F7, "KEY_F7" )
	( KEY_F8, "KEY_F8" )
	( KEY_F9, "KEY_F9" )
	( KEY_F10, "KEY_F10" )
	( KEY_F11, "KEY_F11" )
	( KEY_F12, "KEY_F12" )
	( KEY_F13, "KEY_F13" )
	( KEY_F14, "KEY_F14" )
	( KEY_F15, "KEY_F15" )
	( KEY_NUMLOCK, "KEY_NUMLOCK" )
	( KEY_CAPSLOCK, "KEY_CAPSLOCK" )
	( KEY_SCROLLLOCK, "KEY_SCROLLLOCK" )
	( KEY_RSHIFT, "KEY_RSHIFT" )
	( KEY_LSHFIT, "KEY_LSHFIT" )
	( KEY_RCTRL, "KEY_RCTRL" )
	( KEY_LCTRL, "KEY_LCTRL" )
	( KEY_RALT, "KEY_RALT" )
	( KEY_LALT, "KEY_LALT" )
	( KEY_LGUI, "KEY_LGUI" )
	( KEY_RGUI, "KEY_RGUI" )
	( KEY_HELP, "KEY_HELP" )
	( KEY_PRINT, "KEY_PRINT" )
	( KEY_SYSREQ, "KEY_SYSREQ" )
	( KEY_MENU, "KEY_MENU" );
